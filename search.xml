<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Unity关于WebRequest Post 传输服务器乱码问题</title>
      <link href="/2019/11/13/Unity%E5%85%B3%E4%BA%8EWebRequest%20Post%20%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2019/11/13/Unity%E5%85%B3%E4%BA%8EWebRequest%20Post%20%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>#[Unity]关于WebRequest Post 传输服务器乱码问题</p><p>今天早上做一个将前台用户输入的邮箱号码通过POSE传输给一个接口，接口自动发送找回密码邮件到前台用户输入的邮箱内。在使用Json和wwwform传输均会变成如下这是Json，wwwform只把符号转义了所以我没有贴上去<br>%0d%0a%7b%0d%0a%20%20%22Email%22%20%3a%20%22123%40icon.com%22%0d%0a%7d</p><p>这个是官方一点的解释使用HTTP协议与服务端进行POST通信，传输的数据格式是文本。其中涉及到了base64编码。</p><p>解决思路</p><p>在使用百度搜索无果后，打开了不存在的网站Google，输入Unity、HTTP、POST、URLEncode等关键字。终于寻找到了眉目<br>这个贴主遇到的是JSON序列化后的字符串也经过了“更正”，尽管与我的base64问题并不完全一致，也算的上是受害伙伴了。<br>在回帖中，一位外国友人针对Unity的HTTP通信细节进行了详细讲解。<br><a href="https://forum.unity.com/threads/unitywebrequest-post-url-jsondata-sending-broken-json.414708/" target="_blank" rel="noopener">https://forum.unity.com/threads/unitywebrequest-post-url-jsondata-sending-broken-json.414708/</a></p><p>解决方案是这样的</p><p>//通过PUT方式构造HTTP请求</p><pre><code>byte[] myData = System.Text.Encoding.UTF8.GetBytes(&quot;This is some test data&quot;);UnityWebRequest www = UnityWebRequest.Put(&quot;http://www.my-server.com/upload&quot;, myData);</code></pre><p>//构造好后，手动将请求方式更改为POST</p><pre><code>www.method = UnityWebRequest.kHttpVerbPOST;</code></pre><p>//常规的发送，接收操作</p><pre><code>yield return www.Send();if(www.isError) {  Debug.Log(www.error);}else {  Debug.Log(&quot;Upload complete!&quot;);}</code></pre><p><img src="https://github.com/DevelopSum/Image/raw/master/Fidder.png" alt="Fidder属性示意"></p><p>可以使用以下代码替换”Content-Type”中的属性指定属性</p><p>request.SetRequestHeader(“Content-Type”, “application/x-www-form-urlencoded”);</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Blender入门</title>
      <link href="/2019/11/13/Blender%E5%85%A5%E9%97%A8/"/>
      <url>/2019/11/13/Blender%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Blender入门"><a href="#Blender入门" class="headerlink" title="Blender入门"></a>Blender入门</h1><h4 id="安装和基本设置"><a href="#安装和基本设置" class="headerlink" title="安装和基本设置"></a>安装和基本设置</h4><ol><li>下载 Blender  网址为 <a href="https://www.blender.org/download/releases/2-80/" target="_blank" rel="noopener">https://www.blender.org/download/releases/2-80/</a> 点击中间的 Download Blender 2.80下载 </li><li>安装 Blender 打开下载的.msi文件进行安装，在安装前需要注意不要安装在中文目录下。安装时一直点击Next即可，到选择安装位置的时候可以自定义安装位置。</li><li>第一次进入界面的介绍，在了解完成后点击场景中任意位置即可关闭欢迎界面<br><img src="https://github.com/DevelopSum/Image/raw/master/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E5%BC%80%E7%95%8C%E9%9D%A2.png" alt="第一次打开界面" title="第一次打开界面"></li><li>中文输入法可能会影响快捷键，建议设置为默认英文输入法。如果不会，百度上有很多教程</li><li>更改界面为中文 在软件顶上一栏的 Edit - Interface 这个界面下有一个 Translation 勾选上，在 Language 右侧的选择栏中选择 Automatic(Automatic) 第一个界面即可变为中文的。如果没有更改为中文则将工具提示及界面选项勾选，但千万不要勾选新建数据<br><img src="https://github.com/DevelopSum/Image/raw/master/%E6%9B%B4%E6%94%B9%E8%AF%AD%E8%A8%801.png" alt="更改语言1" title="更改语言1"><br><img src="https://github.com/DevelopSum/Image/raw/master/%E6%9B%B4%E6%94%B9%E8%AF%AD%E8%A8%802.png" alt="更改语言2" title="更改语言2"></li><li>在设置一栏点击系统，对渲染GPU进行设置。如 Nvdia 支持 CUDA 如是 AMD 则选择 OpenCl 但千万不要勾选CPU。在选择完毕后即可直接关闭设置界面，它会自动保存。<br><img src="https://github.com/DevelopSum/Image/raw/master/%E6%9B%B4%E6%94%B9%E6%B8%B2%E6%9F%93GPU.png" alt="更改渲染GPU" title="更改渲染GPU"></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>协程的使用</title>
      <link href="/2019/11/12/%E5%8D%8F%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/12/%E5%8D%8F%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>﻿﻿﻿#开启协程的方法</p><hr><p>我们在Unity中一般使用StartCoroutine开启协程<br>在协程中我们可以执行一些异步的操作。比如下载文件、加载文件等。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LitJson的使用</title>
      <link href="/2019/11/12/LitJson%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/12/LitJson%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>﻿#LitJson的使用</p><hr><p>在项目内引入Using LitJson 命名空间  </p><pre><code>public void Forget(string url) {    JsonData json = new JsonData();    json[&quot;Email&quot;] = emailIpt.text;    Debug.Log(json.ToString());    string jsonData = json.ToJson();    foreach (var item in jsonData) {        print(item.ToString());    }}</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
