<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux查找文件</title>
      <link href="/2019/11/20/Linux%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6/"/>
      <url>/2019/11/20/Linux%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>#Linux查找文件</p><ul><li>使用 find / -name 1111.jpg 命令即可</li><li>1111.jpg是查找的文件名，这里可以被替换</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS学习日志</title>
      <link href="/2019/11/18/NodeJS%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
      <url>/2019/11/18/NodeJS%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>#NodeJS学习日志</p><p><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">官网下载链接</a></p><p><a href="https://blog.csdn.net/DreamWeaver_zhou/article/details/78587580" target="_blank" rel="noopener">什么是高并发 ，详细讲解。转载自 DreamWeaver_Zhou</a></p><p>高并发简称为同时大量同时处理例如：双十一购物，很多人同时抢一个商品，从前端的角度来看确实只是点击了一个按钮，但这时从前端点击按钮之后要向服务器发送一个请求。</p><p>####Node是什么</p><p>######特点：</p><ul><li>chrome v8 runtime</li><li>事件驱动</li><li>非阻塞的I/O<br>IO：input output输入输出流 正常下I/O的操作都是阻塞的 网络请求 数据库处理 文件的读写</li><li>优点：高并发特别好</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SONY 索尼 WH1000XM3 降级方法</title>
      <link href="/2019/11/15/SONY%20%E7%B4%A2%E5%B0%BC%20WH1000XM3%20%E9%99%8D%E7%BA%A7%E6%96%B9%E6%B3%95/"/>
      <url>/2019/11/15/SONY%20%E7%B4%A2%E5%B0%BC%20WH1000XM3%20%E9%99%8D%E7%BA%A7%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="SONY-索尼-WH1000XM3-降级方法"><a href="#SONY-索尼-WH1000XM3-降级方法" class="headerlink" title="SONY 索尼 WH1000XM3 降级方法"></a>SONY 索尼 WH1000XM3 降级方法</h1><p>#降级有风险，并且有几率变砖所以出事本人不负任何责任</p><p>需要电脑 和 手机 在同一 WIFI 下    需要设置代理 不会可以自行去百度</p><p>去这个网址下载这个压缩包</p><p><a href="https://github.com/DevelopSum/Image/blob/master/%E7%B4%A2%E5%B0%BC%E9%99%8D%E7%BA%A7/XM3%E5%9B%BA%E4%BB%B6.zip" target="_blank" rel="noopener">https://github.com/DevelopSum/Image/blob/master/%E7%B4%A2%E5%B0%BC%E9%99%8D%E7%BA%A7/XM3%E5%9B%BA%E4%BB%B6.zip</a></p><p>解压后获得XM3    固件这个插件</p><p>进入 XM3 - mdrproxy_0.0.1 这个目录中</p><p>然后运行 run.cmd</p><p>然后按下数字3键<br>这时候会出现一个端口号，在手机设置 WIFI 中设置代理即可 端口号填写cmd窗口中出现的端口号</p><p>按照步骤一步步来</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac Xcode Simulator 模拟器截屏</title>
      <link href="/2019/11/15/Mac%20Xcode%20Simulator%20%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%88%AA%E5%B1%8F/"/>
      <url>/2019/11/15/Mac%20Xcode%20Simulator%20%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%88%AA%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac-Xcode-Simulator-模拟器截屏"><a href="#Mac-Xcode-Simulator-模拟器截屏" class="headerlink" title="Mac Xcode Simulator 模拟器截屏"></a>Mac Xcode Simulator 模拟器截屏</h1><p>左上角 File -&gt; New Screen Shot 快捷键 command + s</p><p>截图会在桌面</p><p><img src="https://github.com/DevelopSum/Image/raw/master/Mac%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%88%AA%E5%9B%BE/Mac%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%88%AA%E5%9B%BE.png" alt="Mac 模拟器截图"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Blender在姿态模式下修改完成后如何保存</title>
      <link href="/2019/11/15/Blender%E5%9C%A8%E5%A7%BF%E6%80%81%E6%A8%A1%E5%BC%8F%E4%B8%8B%E4%BF%AE%E6%94%B9%E5%AE%8C%E6%88%90%E5%90%8E%E5%A6%82%E4%BD%95%E4%BF%9D%E5%AD%98/"/>
      <url>/2019/11/15/Blender%E5%9C%A8%E5%A7%BF%E6%80%81%E6%A8%A1%E5%BC%8F%E4%B8%8B%E4%BF%AE%E6%94%B9%E5%AE%8C%E6%88%90%E5%90%8E%E5%A6%82%E4%BD%95%E4%BF%9D%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>#Blender在姿态模式下修改完成如何保存，并在Unity内可以使用</p><p>按住 I 键可以进行插入关键帧<br><img src="https://github.com/DevelopSum/Image/raw/master/Blender%E5%9C%A8%E5%A7%BF%E6%80%81%E6%A8%A1%E5%BC%8F%E4%B8%8B%E4%BF%AE%E6%94%B9%E5%AE%8C%E6%88%90%E5%A6%82%E4%BD%95%E4%BF%9D%E5%AD%98/%E6%8F%92%E5%85%A5%E5%85%B3%E9%94%AE%E5%B8%A7.png" alt="插入关键帧"></p><p>也可以按 Ctrl + P 设置父物体目标<br><img src="https://github.com/DevelopSum/Image/raw/master/Blender%E5%9C%A8%E5%A7%BF%E6%80%81%E6%A8%A1%E5%BC%8F%E4%B8%8B%E4%BF%AE%E6%94%B9%E5%AE%8C%E6%88%90%E5%A6%82%E4%BD%95%E4%BF%9D%E5%AD%98/%E8%AE%BE%E7%BD%AE%E7%88%B6%E7%89%A9%E4%BD%93%E7%9B%AE%E6%A0%87.png" alt="设置父物体目标"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity关于WebRequest Post 传输服务器乱码问题</title>
      <link href="/2019/11/13/Unity%E5%85%B3%E4%BA%8EWebRequest%20Post%20%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2019/11/13/Unity%E5%85%B3%E4%BA%8EWebRequest%20Post%20%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>#[Unity]关于WebRequest Post 传输服务器乱码问题</p><p>今天早上做一个将前台用户输入的邮箱号码通过POSE传输给一个接口，接口自动发送找回密码邮件到前台用户输入的邮箱内。在使用Json和wwwform传输均会变成如下这是Json，wwwform只把符号转义了所以我没有贴上去<br>%0d%0a%7b%0d%0a%20%20%22Email%22%20%3a%20%22123%40icon.com%22%0d%0a%7d</p><p>这个是官方一点的解释使用HTTP协议与服务端进行POST通信，传输的数据格式是文本。其中涉及到了base64编码。</p><p>解决思路</p><p>在使用百度搜索无果后，打开了不存在的网站Google，输入Unity、HTTP、POST、URLEncode等关键字。终于寻找到了眉目<br>这个贴主遇到的是JSON序列化后的字符串也经过了“更正”，尽管与我的base64问题并不完全一致，也算的上是受害伙伴了。<br>在回帖中，一位外国友人针对Unity的HTTP通信细节进行了详细讲解。<br><a href="https://forum.unity.com/threads/unitywebrequest-post-url-jsondata-sending-broken-json.414708/" target="_blank" rel="noopener">https://forum.unity.com/threads/unitywebrequest-post-url-jsondata-sending-broken-json.414708/</a></p><p>解决方案是这样的</p><p>//通过PUT方式构造HTTP请求</p><pre><code>byte[] myData = System.Text.Encoding.UTF8.GetBytes(&quot;This is some test data&quot;);UnityWebRequest www = UnityWebRequest.Put(&quot;http://www.my-server.com/upload&quot;, myData);</code></pre><p>//构造好后，手动将请求方式更改为POST</p><pre><code>www.method = UnityWebRequest.kHttpVerbPOST;</code></pre><p>//常规的发送，接收操作</p><pre><code>yield return www.Send();if(www.isError) {  Debug.Log(www.error);}else {  Debug.Log(&quot;Upload complete!&quot;);}</code></pre><p><img src="https://github.com/DevelopSum/Image/raw/master/Fidder.png" alt="Fidder属性示意"></p><p>可以使用以下代码替换”Content-Type”中的属性指定属性</p><pre><code>request.SetRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Blender入门</title>
      <link href="/2019/11/13/Blender%E5%85%A5%E9%97%A8/"/>
      <url>/2019/11/13/Blender%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Blender入门"><a href="#Blender入门" class="headerlink" title="Blender入门"></a>Blender入门</h1><h4 id="安装和基本设置"><a href="#安装和基本设置" class="headerlink" title="安装和基本设置"></a>安装和基本设置</h4><ol><li>下载 Blender  网址为 <a href="https://www.blender.org/download/releases/2-80/" target="_blank" rel="noopener">https://www.blender.org/download/releases/2-80/</a> 点击中间的 Download Blender 2.80下载 </li><li>安装 Blender 打开下载的.msi文件进行安装，在安装前需要注意不要安装在中文目录下。安装时一直点击Next即可，到选择安装位置的时候可以自定义安装位置。</li><li>第一次进入界面的介绍，在了解完成后点击场景中任意位置即可关闭欢迎界面<br><img src="https://github.com/DevelopSum/Image/raw/master/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E5%BC%80%E7%95%8C%E9%9D%A2.png" alt="第一次打开界面" title="第一次打开界面"></li><li>中文输入法可能会影响快捷键，建议设置为默认英文输入法。如果不会，百度上有很多教程</li><li>更改界面为中文 在软件顶上一栏的 Edit - Interface 这个界面下有一个 Translation 勾选上，在 Language 右侧的选择栏中选择 Automatic(Automatic) 第一个界面即可变为中文的。如果没有更改为中文则将工具提示及界面选项勾选，但千万不要勾选新建数据<br><img src="https://github.com/DevelopSum/Image/raw/master/%E6%9B%B4%E6%94%B9%E8%AF%AD%E8%A8%801.png" alt="更改语言1" title="更改语言1"><br><img src="https://github.com/DevelopSum/Image/raw/master/%E6%9B%B4%E6%94%B9%E8%AF%AD%E8%A8%802.png" alt="更改语言2" title="更改语言2"></li><li>在设置一栏点击系统，对渲染GPU进行设置。如 Nvdia 支持 CUDA 如是 AMD 则选择 OpenCl 但千万不要勾选CPU。在选择完毕后即可直接关闭设置界面，它会自动保存。<br><img src="https://github.com/DevelopSum/Image/raw/master/%E6%9B%B4%E6%94%B9%E6%B8%B2%E6%9F%93GPU.png" alt="更改渲染GPU" title="更改渲染GPU"></li></ol><h4 id="界面布局"><a href="#界面布局" class="headerlink" title="界面布局"></a>界面布局</h4><ol><li>界面布局<br><img src="https://github.com/DevelopSum/Image/raw/master/%E7%95%8C%E9%9D%A2%E5%B8%83%E5%B1%80.png" alt="界面布局"></li><li>视图合并<br><img src="https://github.com/DevelopSum/Image/raw/master/%E8%A7%86%E5%9B%BE%E5%90%88%E5%B9%B6.png" alt="视图合并"></li><li>在设置完喜欢的启动布局后可以在 文件 - 默认 - 保存启动文件，这样每次启动第一启动界面都是你喜欢的启动布局界面</li></ol><h4 id="视图及基本操作"><a href="#视图及基本操作" class="headerlink" title="视图及基本操作"></a>视图及基本操作</h4><ol><li><p>如下图所示基本介绍<br><img src="https://github.com/DevelopSum/Image/raw/master/%E8%A7%86%E5%9B%BE%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E8%A7%86%E5%9B%BE%E7%AE%80%E4%BB%8B.png" alt="视图简介"></p><p> 坐标系还有另一种快捷方式，如下图<br><img src="https://github.com/DevelopSum/Image/raw/master/%E8%A7%86%E5%9B%BE%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E5%9D%90%E6%A0%87%E7%B3%BB%E5%BF%AB%E6%8D%B7%E9%94%AE.png" alt="坐标系快捷键"></p></li><li><p>选择：全选快捷键为 A ，取消全选快捷键为 AA 也可以使用Alt + A 。也可以单机鼠标左键选择，也可以按住 Shift + 鼠标左键单击选择；此时选中的最后一个物体是高亮状态。也可以进行框选，默认为框选，点击如下图标还有如下几种选择模式，也可以在界面视图窗中找到选择按钮点击会有更多的选择方式：<br><img src="https://github.com/DevelopSum/Image/raw/master/%E8%A7%86%E5%9B%BE%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E9%80%89%E6%8B%A9.png" alt="选择1"><br><img src="https://github.com/DevelopSum/Image/raw/master/%E8%A7%86%E5%9B%BE%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E9%80%89%E6%8B%A92.png" alt="选择2"></p></li><li><p>其它操作如下图所示<br><img src="https://github.com/DevelopSum/Image/raw/master/%E8%A7%86%E5%9B%BE%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E5%85%B6%E5%AE%83%E6%93%8D%E4%BD%9C.png" alt="其它操作"></p></li><li><p>游标<br><img src="https://github.com/DevelopSum/Image/raw/master/%E8%A7%86%E5%9B%BE%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E6%B8%B8%E6%A0%87.png" alt="游标"></p></li></ol><h4 id="编辑模式下的工具栏"><a href="#编辑模式下的工具栏" class="headerlink" title="编辑模式下的工具栏"></a>编辑模式下的工具栏</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>协程的使用</title>
      <link href="/2019/11/12/%E5%8D%8F%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/12/%E5%8D%8F%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>﻿﻿﻿#开启协程的方法</p><hr><p>我们在Unity中一般使用StartCoroutine开启协程<br>在协程中我们可以执行一些异步的操作。比如下载文件、加载文件等。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LitJson的使用</title>
      <link href="/2019/11/12/LitJson%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/12/LitJson%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>﻿#LitJson的使用</p><hr><p>在项目内引入Using LitJson 命名空间  </p><pre><code>public void Forget(string url) {    JsonData json = new JsonData();    json[&quot;Email&quot;] = emailIpt.text;    Debug.Log(json.ToString());    string jsonData = json.ToJson();    foreach (var item in jsonData) {        print(item.ToString());    }}</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
